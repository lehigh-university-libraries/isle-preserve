<?php

/**
 * @file
 * Primary module hooks for Views Attachment Tab module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\views\ViewExecutable;
use Drupal\Component\Utility\Html;
/**
 * Implements hook_form_alter().
 */

/**
 * Implements hook_views_pre_render().
 */
function views_attachment_tabs_views_pre_render(ViewExecutable $view) {

  // Get the current display.
  $display = $view->getDisplay();

  // And get the list of extenders for this display.
  $extenders = $display->getExtenders();

  // If the id of our plugin is not in the list something is wrong.
  if (!isset($extenders['attachment_tabs'])) {
    return $view;
  }

  // Manage attachment tab group parent
  // Checks if attachment tab option is enabled and that attachments exist

  $child_attachments = array_merge($view->attachment_before, $view->attachment_after);

  /** @todo – This conditional isn’t right. In one implementation an EVA view
   *  applied to a rendered node was passing this conditional, causing the
   *  tabgroup styles to be applied and causing havoc.
   *
   *  Not sure why. Was the EVA inheriting the 'attachment_tabs_enabled' option?
   *  Is the default attachment_tabs_enabled "true" for views created before the
   *  module is enabled?
   *
   *  This conditional ensures that the attachment tab group has child attachments.
   *  While it solves the problem in the EVA end case, what would happen in an
   *  EVA had its own attachments? It all points to a logic failure somewhere.
   *
   *  Regardless this does the trick for now.
   */

  if ($extenders['attachment_tabs']->options['attachment_tabs_enabled'] && count($child_attachments) > 0) {
    // Parent view is being rendered so has a BigPipe DOM ID.
    // Child attachments may not have DOM IDs yet, but we can
    // make the parent DOM id available to the attachment and via JS

    $parent_dom_id = "vat-parent-" . $view->dom_id;
    // $row_container_class = $extenders['attachment_tabs']->options['attachment_tabs_default_container_class'];

    $tabs = [];

    $default_attachment_display = array_key_exists('default_attachment_display',$view->style_plugin->options) ? $view->style_plugin->options['default_attachment_display'] : '';
    $display->setOption('css_class', "view-attachment-tab-parent {$view->current_display} {$parent_dom_id}");


    /*
    $tabs = [
      $view->id() => [
        'label' => $view->getTitle(),
        'id' => $view->current_display,
        'parent_dom_id' => $parent_dom_id,
        'target' => '.view-attachment-tab-'. $view->current_display
      ]
    ];

    */

    foreach ($child_attachments as $attachment) {
      /**  @var $attached_view \Drupal\views\ViewExecutable */
      $attached_view = $attachment['#view'];
      $attached_display = $attached_view->getDisplay();
      $id = $attached_view->current_display;
      $attached_display->setOption('attachment_tab', TRUE);
      $attached_display->setOption('parent_dom', $parent_dom_id);

      $css_classes = "view-attachment-tab view-attachment-tab-{$attached_view->current_display} {$attached_view->current_display}";

      if($id != $default_attachment_display) {
        $css_classes .= " view-attachment-tab-hidden";
      }

      $attached_display->setOption('css_class',$css_classes);

      $tabs[$id] = [
        'label' => $attached_view->getTitle(),
        'id' => $id,
        'parent_dom_id' => $parent_dom_id,
        'target' => '.view-attachment-tab-'. str_replace('_','-',$id),
        'default' => $id == $default_attachment_display ? true : false
      ];
    };


    $tab_interface = [
      '#theme' => 'views_attachment_tabs',
      '#tabs' => $tabs,
      '#weight' => -1
    ];

    $display->setOption('attachment_tab_ui',$tab_interface);

    $view->element['#attached']['drupalSettings']['viewsAttachmentTabs'] = [
      'tabGroup' => [
        'views_dom_id:' . $view->dom_id => [
          'view_name' => $view->storage->id(),
          'view_display_id' => $view->current_display,
          'view_args' => Html::escape(implode('/', $view->args)),
          'view_path' => Html::escape(\Drupal::service('path.current')
            ->getPath()),
          'view_base_path' => $view->getPath(),
          'view_dom_id' => $view->dom_id,
          'view_child_attachments' => count($child_attachments),
          'view_tabs' => $tabs
        ],
      ],
    ];
    $view->element['#attached']['library'][] = 'views_attachment_tabs/views_attachment_tabs.main';
  }
  // Manages tab group child attachments.



  return $view;

}

function views_attachment_tabs_preprocess_views_view(&$vars) {
  /** @var ViewExecutable $view */
  $view = &$vars["view"];
  $display = $view->getDisplay();
  $tab_ui = $display->getOption('attachment_tab_ui');

  if ($tab_ui) {
    $vars['header']['attachment_tab_build'] = $tab_ui;
  }

}

/**
 * Implements hook_theme().
 */
function views_attachment_tabs_theme($existing, $type, $theme, $path) {
  return [
    'views_attachment_tabs' => [
      'template' => 'views/views_attachment_tabs',
      'variables' => [
        'tabs' => []
      ]
    ]
  ];
}
/**
 * "views_page:browse__main"
"views_attachment:browse__card_view"
"views_attachment:browse__list"
"views_attachment:browse__masonry"
 */
function views_attachment_tabs_search_api_query_alter(\Drupal\search_api\Query\QueryInterface &$query) {

$facet_manager = \Drupal::service('facets.manager');
$search_id = $query->getSearchId();

//dpm($search_id);

//if(strpos($search_id, 'views_page:browse__main') === 0) {
  //$search_id = 'views_attachment:browse__card_view';
  //$facet_manager->alterQuery($query, $search_id);
//}
}
