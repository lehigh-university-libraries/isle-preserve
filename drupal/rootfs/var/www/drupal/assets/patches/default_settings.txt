/**
 *  Section appended onto drupal/core default.settings.php via "drupal-scaffold" in composer.json.
 */

// Let Drush use all the memory available.
if (PHP_SAPI === 'cli') {
  ini_set('memory_limit', '-1');
}

// Required when running Drupal behind a reverse proxy.
$settings['reverse_proxy'] = TRUE;
$settings['reverse_proxy_addresses'] = [
  '128.180.1.79/32',
  '128.180.1.80/32',
  '172.0.0.0/8'
];

$settings['reverse_proxy_trusted_headers'] = \Symfony\Component\HttpFoundation\Request::HEADER_X_FORWARDED_FOR |
\Symfony\Component\HttpFoundation\Request::HEADER_X_FORWARDED_PROTO | \Symfony\Component\HttpFoundation\Request::HEADER_X_FORWARDED_PORT;

/**
 * Private file path:
 *
 * A local file system path where private files will be stored. This directory
 * must be absolute, outside of the Drupal installation directory and not
 * accessible over the web.
 *
 * Note: Caches need to be cleared when this value is changed to make the
 * private:// stream wrapper available to the system.
 *
 * See https://www.drupal.org/documentation/modules/file for more information
 * about securing private files.
 */
$settings['file_private_path'] = '/var/www/drupal/private';
$settings['file_assets_path'] = 'sites/default/files';

// Shared configuration, config_split is used for any site specific differences.
$settings['config_sync_directory'] = '/var/www/drupal/config/sync';

// Content sync module.
global $content_directories;
$content_directories['sync'] = '/var/www/drupal/content/sync';

// Some configurations are derived from environment variables.
$config['islandora.settings']['broker_url'] = getenv('DRUPAL_DEFAULT_BROKER_URL');
$config['islandora.settings']['broker_user'] = NULL;
$config['islandora.settings']['broker_password'] = NULL;
$config['islandora_iiif.settings']['iiif_server'] = getenv('DRUPAL_DEFAULT_CANTALOUPE_URL');
$config['openseadragon.settings']['iiif_server'] = getenv('DRUPAL_DEFAULT_CANTALOUPE_URL');
$config['search_api.server.default_solr_server']['backend_config']['connector_config']['host'] = getenv('DRUPAL_DEFAULT_SOLR_HOST');
$config['search_api.server.default_solr_server']['backend_config']['connector_config']['port'] = getenv('DRUPAL_DEFAULT_SOLR_PORT');
$config['search_api.server.default_solr_server']['backend_config']['connector_config']['core'] = getenv('DRUPAL_DEFAULT_SOLR_CORE');
$config['islandora_repository_reports_activemq.settings']['islandora_repository_reports_activemq_admin_password'] = getenv('ACTIVEMQ_WEB_ADMIN_PASSWORD');

$config['turnstile.settings']['site_key'] = getenv("TURNSTILE_SITE_KEY");
$config['turnstile.settings']['secret_key'] = getenv("TURNSTILE_SECRET_KEY");
$settings['hash_salt'] = getenv('DRUPAL_DEFAULT_SALT');
$settings['trusted_host_patterns'] = [
  getenv('DRUPAL_DEFAULT_SITE_URL'),
  'drupal',
  'drupal-lehigh',
  'islandora-prod.lib.lehigh.edu',
  'islandora-test.lib.lehigh.edu',
];

// Database settings are also derived from environment variables.
$databases['default']['default'] = [
  'database' => getenv('DRUPAL_DEFAULT_DB_NAME'),
  'username' => getenv('DRUPAL_DEFAULT_DB_USER'),
  'password' => getenv('DRUPAL_DEFAULT_DB_PASSWORD'),
  'host' => getenv('DB_MYSQL_HOST'),
  'port' => getenv('DB_MYSQL_PORT'),
  'prefix' => '',
  'driver' => 'mysql',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
];

$config['key.key.islandora_rsa_key']['key_provider_settings']['file_location'] = '/opt/keys/jwt/private.key';

// Flysystem
$settings['flysystem']['fedora']['driver'] = 'fedora';
$settings['flysystem']['fedora']['config']['root'] = getenv('DRUPAL_DEFAULT_FCREPO_URL');

$envs = ['production'];
foreach ($envs as $env) {
  $uri = 'gs-' . $env;
  $settings['flysystem'][$uri] = [
    'driver' => 'gcs',
    'config' => [
      'bucket' => 'lehigh-preserve-isle-' . $env . '-uploads',
      'projectId' => 'lehigh-preserve-isle',
    ]
  ];
}

// Change the php_storage settings in your setting.php. It is recommend that
// this directory be outside out of the docroot.
$settings['php_storage']['twig']['directory'] = $settings['file_private_path'] . '/php';
$settings['php_storage']['twig']['secret'] = $settings['hash_salt'];

$settings['file_temp_path'] = '/tmp';

$memcache_exists = class_exists('Memcache', FALSE);
if ($memcache_exists) {
  $settings['memcache']['servers'] = ['memcached:11211' => 'default'];
  $settings['memcache']['bins'] = ['default' => 'default'];
  $settings['memcache']['key_prefix'] = '';
  $settings['cache']['default'] = 'cache.backend.memcache';

  $class_loader->addPsr4('Drupal\\memcache\\', 'modules/contrib/memcache/src');

  // Define custom bootstrap container definition to use Memcache for cache.container.
  $settings['bootstrap_container_definition'] = [
    'parameters' => [],
    'services' => [
      # Dependencies.
      'settings' => [
        'class' => 'Drupal\Core\Site\Settings',
        'factory' => 'Drupal\Core\Site\Settings::getInstance',
      ],
      'memcache.settings' => [
        'class' => 'Drupal\memcache\MemcacheSettings',
        'arguments' => ['@settings'],
      ],
      'memcache.factory' => [
        'class' => 'Drupal\memcache\Driver\MemcacheDriverFactory',
        'arguments' => ['@memcache.settings'],
      ],
      'memcache.timestamp.invalidator.bin' => [
        'class' => 'Drupal\memcache\Invalidator\MemcacheTimestampInvalidator',
        # Adjust tolerance factor as appropriate when not running memcache on localhost.
        'arguments' => ['@memcache.factory', 'memcache_bin_timestamps', 0.001],
      ],
      'memcache.timestamp.invalidator.tag' => [
        'class' => 'Drupal\memcache\Invalidator\MemcacheTimestampInvalidator',
        # Remember to update your main service definition in sync with this!
        # Adjust tolerance factor as appropriate when not running memcache on localhost.
        'arguments' => ['@memcache.factory', 'memcache_tag_timestamps', 0.001],
      ],
      'memcache.backend.cache.container' => [
        'class' => 'Drupal\memcache\DrupalMemcacheInterface',
        'factory' => ['@memcache.factory', 'get'],
        # Actual cache bin to use for the container cache.
        'arguments' => ['container'],
      ],
      # Define a custom cache tags invalidator for the bootstrap container.
      'cache_tags_provider.container' => [
        'class' => 'Drupal\memcache\Cache\TimestampCacheTagsChecksum',
        'arguments' => ['@memcache.timestamp.invalidator.tag'],
      ],
      'cache.container' => [
        'class' => 'Drupal\memcache\MemcacheBackend',
        'arguments' => ['container', '@memcache.backend.cache.container', '@cache_tags_provider.container', '@memcache.timestamp.invalidator.bin'],
      ],
    ],
  ];
}

/**
 *  End Section.
 */
