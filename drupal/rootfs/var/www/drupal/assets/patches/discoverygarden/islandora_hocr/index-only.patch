diff --git a/src/Plugin/search_api/processor/HOCRField.php b/src/Plugin/search_api/processor/HOCRField.php
index d3666de..fe7f72b 100644
--- a/src/Plugin/search_api/processor/HOCRField.php
+++ b/src/Plugin/search_api/processor/HOCRField.php
@@ -24,6 +24,7 @@ use Symfony\Component\DependencyInjection\ContainerInterface;
  *   description = @Translation("Add hOCR to the index."),
  *   stages = {
  *     "add_properties" = 20,
+ *     "preprocess_index" = 20,
  *   },
  *   locked = true,
  *   hidden = true,
@@ -100,18 +101,6 @@ class HOCRField extends ProcessorPluginBase {
         'value' => NULL,
       ],
     ];
-    $data['file']['callable'] = function () use ($entity, &$data) {
-      $data['file']['value'] ??= $this->getFile($entity);
-      return $data['file']['value'];
-    };
-    $data['uri']['callable'] = function () use (&$data) {
-      $data['uri']['value'] ??= $data['file']['callable']() ? $data['file']['value']->getFileUri() : NULL;
-      return $data['uri']['value'];
-    };
-    $data['content']['callable'] = function () use (&$data) {
-      $data['content']['value'] ??= $data['uri']['callable']() ? file_get_contents($data['uri']['value']) : NULL;
-      return $data['content']['value'];
-    };
 
     $fields = $item->getFields();
 
@@ -126,11 +115,69 @@ class HOCRField extends ProcessorPluginBase {
         if (!$field->getValues()) {
           // Lazily load content from entity, as the field might already be
           // populated.
-          $field->addValue($info['callable']());
+          $field->addValue(NULL);
         }
       }
     }
+  }
 
+  /**
+   * {@inheritDoc}
+   *
+   * Adapted from https://git.drupalcode.org/project/search_api/-/blob/8.x-1.x/src/Plugin/search_api/processor/EntityType.php#L47-67
+   */
+  public function preprocessIndexItems(array $items) {
+    foreach ($items as &$item) {
+      try {
+        $entity = $item->getOriginalObject()->getValue();
+      }
+      catch (SearchApiException $e) {
+        return;
+      }
+
+      if (!($entity instanceof NodeInterface)) {
+        return;
+      }
+
+      $data = [
+        'file' => [
+          'value' => NULL,
+        ],
+        'uri' => [
+          'value' => NULL,
+        ],
+        'content' => [
+          'value' => NULL,
+        ],
+      ];
+      $data['file']['callable'] = function () use ($entity, &$data) {
+        $data['file']['value'] ??= $this->getFile($entity);
+        return $data['file']['value'];
+      };
+      $data['uri']['callable'] = function () use (&$data) {
+        $data['uri']['value'] ??= $data['file']['callable']() ? $data['file']['value']->getFileUri() : NULL;
+        return $data['uri']['value'];
+      };
+      $data['content']['callable'] = function () use (&$data) {
+        $data['content']['value'] ??= $data['uri']['callable']() ? file_get_contents($data['uri']['value']) : NULL;
+        return $data['content']['value'];
+      };
+
+      $fields = $item->getFields();
+
+      foreach ($data as $key => $info) {
+        $spec_fields = $this->getFieldsHelper()
+          ->filterForPropertyPath(
+            $fields,
+            $item->getDatasourceId(),
+            static::PROPERTY_NAME . ":$key"
+          );
+        foreach ($spec_fields as $field) {
+          $field->addValue($info['callable']());
+        }
+      }
+
+    }
   }
 
   /**
