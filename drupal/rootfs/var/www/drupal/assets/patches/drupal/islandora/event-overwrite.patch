From a1b9043ce8c7549dc18ac0b1d139aa4e2e9470ca Mon Sep 17 00:00:00 2001
From: Joe Corall <jjc223@lehigh.edu>
Date: Thu, 30 Oct 2025 14:28:23 -0400
Subject: [PATCH] Allow pointing alpaca to internal domains

---
 config/install/islandora.settings.yml   |   1 +
 config/schema/islandora.schema.yml      |   3 +
 islandora.services.yml                  |   2 +-
 src/EventGenerator/EventGenerator.php   |  60 +++++++++-
 src/Form/IslandoraSettingsForm.php      |  10 ++
 tests/src/Kernel/EventGeneratorTest.php | 145 +++++++++++++++++++++++-
 6 files changed, 218 insertions(+), 3 deletions(-)

diff --git a/config/install/islandora.settings.yml b/config/install/islandora.settings.yml
index fa6b2f4ca..6c43f05e4 100644
--- a/config/install/islandora.settings.yml
+++ b/config/install/islandora.settings.yml
@@ -4,3 +4,4 @@ delete_media_and_files: TRUE
 gemini_pseudo_bundles: []
 allow_header_links: TRUE
 fast_term_queries: TRUE
+microservice_url_rewrites: ''
diff --git a/config/schema/islandora.schema.yml b/config/schema/islandora.schema.yml
index a2b20a0fc..32f877f52 100644
--- a/config/schema/islandora.schema.yml
+++ b/config/schema/islandora.schema.yml
@@ -37,6 +37,9 @@ islandora.settings:
       label: 'List of node, media and taxonomy terms that should include the linked Fedora URI'
       sequence:
         type: string
+    microservice_url_rewrites:
+      type: text
+      label: 'URL rewrite rules for microservice events'
 
 
 action.configuration.emit_node_event:
diff --git a/islandora.services.yml b/islandora.services.yml
index 0a0556b5c..348c8b0e3 100644
--- a/islandora.services.yml
+++ b/islandora.services.yml
@@ -3,7 +3,7 @@
 services:
   islandora.eventgenerator:
     class: Drupal\islandora\EventGenerator\EventGenerator
-    arguments: ['@islandora.utils', '@islandora.media_source_service']
+    arguments: ['@islandora.utils', '@islandora.media_source_service', '@config.factory']
   islandora.stomp:
     class: Stomp\StatefulStomp
     factory: ['Drupal\islandora\StompFactory', create]
diff --git a/src/EventGenerator/EventGenerator.php b/src/EventGenerator/EventGenerator.php
index ab172225d..716ff14bb 100644
--- a/src/EventGenerator/EventGenerator.php
+++ b/src/EventGenerator/EventGenerator.php
@@ -9,6 +9,8 @@
 use Drupal\islandora\IslandoraUtils;
 use Drupal\islandora\MediaSource\MediaSourceService;
 use Drupal\user\UserInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\islandora\Form\IslandoraSettingsForm;
 
 /**
  * The default EventGenerator implementation.
@@ -31,6 +33,13 @@ class EventGenerator implements EventGeneratorInterface {
    */
   protected $mediaSource;
 
+  /**
+   * Config factory.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
   /**
    * Constructor.
    *
@@ -38,10 +47,13 @@ class EventGenerator implements EventGeneratorInterface {
    *   Islandora utils.
    * @param \Drupal\islandora\MediaSource\MediaSourceService $media_source
    *   Media source service.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   Config factory.
    */
-  public function __construct(IslandoraUtils $utils, MediaSourceService $media_source) {
+  public function __construct(IslandoraUtils $utils, MediaSourceService $media_source, ConfigFactoryInterface $config_factory) {
     $this->utils = $utils;
     $this->mediaSource = $media_source;
+    $this->configFactory = $config_factory;
   }
 
   /**
@@ -161,6 +173,9 @@ public function generateEvent(EntityInterface $entity, UserInterface $user, arra
       unset($data[$key]);
     }
 
+    // Apply URL rewrites for microservices.
+    $this->applyUrlRewrites($data);
+
     if (!empty($data)) {
       $event["attachment"] = [
         "type" => "Object",
@@ -172,6 +187,49 @@ public function generateEvent(EntityInterface $entity, UserInterface $user, arra
     return json_encode($event);
   }
 
+  /**
+   * Apply URL rewrites to event data URIs.
+   *
+   * @param array &$data
+   *   Event data array to modify.
+   */
+  protected function applyUrlRewrites(array &$data) {
+    $config = $this->configFactory->get(IslandoraSettingsForm::CONFIG_NAME);
+    $rewrites = $config->get(IslandoraSettingsForm::MICROSERVICE_URL_REWRITES);
+
+    if (empty($rewrites)) {
+      return;
+    }
+
+    // Parse rewrite rules from config.
+    $find = [];
+    $replace = [];
+    $lines = explode("\n", $rewrites);
+    foreach ($lines as $line) {
+      $line = trim($line);
+      if (empty($line)) {
+        continue;
+      }
+      $parts = explode('|', $line, 2);
+      if (count($parts) === 2) {
+        $find[] = trim($parts[0]);
+        $replace[] = trim($parts[1]);
+      }
+    }
+
+    if (empty($find)) {
+      return;
+    }
+
+    // Apply rewrites to URI fields.
+    $uri_fields = ["file_upload_uri", "source_uri", "destination_uri"];
+    foreach ($uri_fields as $key) {
+      if (isset($data[$key])) {
+        $data[$key] = str_replace($find, $replace, $data[$key]);
+      }
+    }
+  }
+
   /**
    * Method to check if an entity is a new revision.
    *
diff --git a/src/Form/IslandoraSettingsForm.php b/src/Form/IslandoraSettingsForm.php
index e132700d4..6ea10fdc1 100644
--- a/src/Form/IslandoraSettingsForm.php
+++ b/src/Form/IslandoraSettingsForm.php
@@ -46,6 +46,7 @@ class IslandoraSettingsForm extends ConfigFormBase {
   const REDIRECT_AFTER_MEDIA_SAVE = 'redirect_after_media_save';
   const ALLOW_HEADER_LINKS = 'allow_header_links';
   const FAST_TERM_QUERIES = 'fast_term_queries';
+  const MICROSERVICE_URL_REWRITES = 'microservice_url_rewrites';
 
   /**
    * To list the available bundle types.
@@ -237,6 +238,14 @@ public function buildForm(array $form, FormStateInterface $form_state) {
       '#default_value' => (bool) $config->get(self::FAST_TERM_QUERIES),
     ];
 
+    $form[self::MICROSERVICE_URL_REWRITES] = [
+      '#type' => 'textarea',
+      '#title' => $this->t('Microservice URL rewrites'),
+      '#description' => $this->t('URL rewrite rules for microservice events. Enter one rule per line in the format: find_pattern|replace_pattern. For example: "https://test-arch.lib.mnsu.edu|http://localhost" will rewrite all occurrences of the first URL to the second in file URIs sent to microservices.'),
+      '#default_value' => $config->get(self::MICROSERVICE_URL_REWRITES),
+      '#rows' => 5,
+    ];
+
     $form[self::FEDORA_URL] = [
       '#type' => 'textfield',
       '#title' => $this->t('Fedora URL'),
@@ -402,6 +411,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
       ->set(self::FAST_TERM_QUERIES, $form_state->getValue(self::FAST_TERM_QUERIES))
       ->set(self::REDIRECT_AFTER_MEDIA_SAVE, $form_state->getValue(self::REDIRECT_AFTER_MEDIA_SAVE))
       ->set(self::ALLOW_HEADER_LINKS, $form_state->getValue(self::ALLOW_HEADER_LINKS))
+      ->set(self::MICROSERVICE_URL_REWRITES, $form_state->getValue(self::MICROSERVICE_URL_REWRITES))
       ->save();
 
     parent::submitForm($form, $form_state);
diff --git a/tests/src/Kernel/EventGeneratorTest.php b/tests/src/Kernel/EventGeneratorTest.php
index 34a5ae925..c5b08b694 100644
--- a/tests/src/Kernel/EventGeneratorTest.php
+++ b/tests/src/Kernel/EventGeneratorTest.php
@@ -66,7 +66,8 @@ public function setUp(): void {
     // Create the event generator so we can test it.
     $this->eventGenerator = new EventGenerator(
       $this->container->get('islandora.utils'),
-      $this->container->get('islandora.media_source_service')
+      $this->container->get('islandora.media_source_service'),
+      $this->container->get('config.factory')
     );
   }
 
@@ -176,4 +177,146 @@ protected function assertBasicStructure(array $msg) {
     }
   }
 
+  /**
+   * Tests URL rewriting in microservice events.
+   *
+   * @covers \Drupal\islandora\EventGenerator\EventGenerator::generateEvent
+   * @covers \Drupal\islandora\EventGenerator\EventGenerator::applyUrlRewrites
+   */
+  public function testMicroserviceUrlRewrites() {
+    // Configure URL rewrites.
+    $config = $this->container->get('config.factory')->getEditable('islandora.settings');
+    $config->set('microservice_url_rewrites', "https://example.com|http://localhost\nhttps://test.org|http://internal.local");
+    $config->save();
+
+    // Create a new event generator with the updated config.
+    $this->eventGenerator = new EventGenerator(
+      $this->container->get('islandora.utils'),
+      $this->container->get('islandora.media_source_service'),
+      $this->container->get('config.factory')
+    );
+
+    // Generate an event with URIs that should be rewritten.
+    $json = $this->eventGenerator->generateEvent(
+      $this->entity,
+      $this->user,
+      [
+        'event' => 'Generate Derivative',
+        'source_uri' => 'https://example.com/_flysystem/fedora/file.jpg',
+        'destination_uri' => 'https://example.com/media/1/source',
+        'file_upload_uri' => 'public://derivatives/test.mp4',
+      ]
+    );
+    $msg = json_decode($json, TRUE);
+
+    // Assert URIs were rewritten.
+    $this->assertTrue(
+      isset($msg['attachment']['content']['source_uri']),
+      "Event should contain source_uri in attachment content"
+    );
+    $this->assertEquals(
+      'http://localhost/_flysystem/fedora/file.jpg',
+      $msg['attachment']['content']['source_uri'],
+      "source_uri should be rewritten from https://example.com to http://localhost"
+    );
+    $this->assertEquals(
+      'http://localhost/media/1/source',
+      $msg['attachment']['content']['destination_uri'],
+      "destination_uri should be rewritten from https://example.com to http://localhost"
+    );
+    $this->assertEquals(
+      'public://derivatives/test.mp4',
+      $msg['attachment']['content']['file_upload_uri'],
+      "file_upload_uri should not be rewritten when it doesn't match any pattern"
+    );
+  }
+
+  /**
+   * Tests URL rewriting with multiple patterns.
+   *
+   * @covers \Drupal\islandora\EventGenerator\EventGenerator::generateEvent
+   * @covers \Drupal\islandora\EventGenerator\EventGenerator::applyUrlRewrites
+   */
+  public function testMicroserviceUrlRewritesMultiplePatterns() {
+    // Configure URL rewrites with multiple patterns.
+    $config = $this->container->get('config.factory')->getEditable('islandora.settings');
+    $config->set('microservice_url_rewrites', "islandora-test.lib|islandora-stage.lib\nislandora-prod.lib|preserve.lib");
+    $config->save();
+
+    // Create a new event generator with the updated config.
+    $this->eventGenerator = new EventGenerator(
+      $this->container->get('islandora.utils'),
+      $this->container->get('islandora.media_source_service'),
+      $this->container->get('config.factory')
+    );
+
+    // Generate an event with URIs that match different patterns.
+    $json = $this->eventGenerator->generateEvent(
+      $this->entity,
+      $this->user,
+      [
+        'event' => 'Generate Derivative',
+        'source_uri' => 'https://islandora-test.lib/file.jpg',
+        'destination_uri' => 'https://islandora-prod.lib/media/1/source',
+      ]
+    );
+    $msg = json_decode($json, TRUE);
+
+    // Assert both patterns were applied.
+    $this->assertEquals(
+      'https://islandora-stage.lib/file.jpg',
+      $msg['attachment']['content']['source_uri'],
+      "source_uri should be rewritten from islandora-test.lib to islandora-stage.lib"
+    );
+    $this->assertEquals(
+      'https://preserve.lib/media/1/source',
+      $msg['attachment']['content']['destination_uri'],
+      "destination_uri should be rewritten from islandora-prod.lib to preserve.lib"
+    );
+  }
+
+  /**
+   * Tests that events work correctly with no URL rewrites configured.
+   *
+   * @covers \Drupal\islandora\EventGenerator\EventGenerator::generateEvent
+   * @covers \Drupal\islandora\EventGenerator\EventGenerator::applyUrlRewrites
+   */
+  public function testNoUrlRewrites() {
+    // Ensure no rewrites are configured.
+    $config = $this->container->get('config.factory')->getEditable('islandora.settings');
+    $config->set('microservice_url_rewrites', '');
+    $config->save();
+
+    // Create a new event generator with the updated config.
+    $this->eventGenerator = new EventGenerator(
+      $this->container->get('islandora.utils'),
+      $this->container->get('islandora.media_source_service'),
+      $this->container->get('config.factory')
+    );
+
+    // Generate an event.
+    $json = $this->eventGenerator->generateEvent(
+      $this->entity,
+      $this->user,
+      [
+        'event' => 'Generate Derivative',
+        'source_uri' => 'https://example.com/_flysystem/fedora/file.jpg',
+        'destination_uri' => 'https://example.com/media/1/source',
+      ]
+    );
+    $msg = json_decode($json, TRUE);
+
+    // Assert URIs were NOT rewritten.
+    $this->assertEquals(
+      'https://example.com/_flysystem/fedora/file.jpg',
+      $msg['attachment']['content']['source_uri'],
+      "source_uri should not be rewritten when no rewrites are configured"
+    );
+    $this->assertEquals(
+      'https://example.com/media/1/source',
+      $msg['attachment']['content']['destination_uri'],
+      "destination_uri should not be rewritten when no rewrites are configured"
+    );
+  }
+
 }
